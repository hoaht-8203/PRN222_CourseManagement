@page "/vip-subscription"
@using AntDesign
@using System.Security.Claims
@using BlazorAppSecure.Model
@using Microsoft.AspNetCore.Components.Forms
@using CourseManagement.Model.Constant
@using CourseManagement.Model.Model
@using CourseManagement.Model.ViewModel
@inject NavigationManager Navigation
@inject IHttpClientFactory HttpClientFactory
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IMessageService _mess

<BlazorAppSecure.Layout.HeaderHome />
<PageTitle>Vip Subcription</PageTitle>

<div class="subscription-page">
    <div class="subscription-header">
        <Breadcrumb>
            <BreadcrumbItem Href="">
                Home
            </BreadcrumbItem>
            <BreadcrumbItem>
                Subscription
            </BreadcrumbItem>
        </Breadcrumb>
        <h1>Đăng ký gói VIP</h1>
        <p class="subtitle">Chọn gói VIP phù hợp với nhu cầu của bạn</p>
    </div>

    <div class="subscription-container">
        <div class="subscription-packages">
            <div class="package-card @(_vipModel.Package == "1" ? "selected" : "")"
                @onclick="@(() => _vipModel.Package = "1")">
                <div class="package-header">
                    <h3>Gói 1 tháng</h3>
                    <div class="price">100.000 VND</div>
                </div>
                <div class="package-features">
                    <ul>
                        <li>Truy cập không giới hạn</li>
                        <li>Hỗ trợ 24/7</li>
                        <li>Ưu tiên xử lý</li>
                    </ul>
                </div>
            </div>

            <div class="package-card @(_vipModel.Package == "3" ? "selected" : "")"
                @onclick="@(() => _vipModel.Package = "3")">
                <div class="package-header">
                    <h3>Gói 3 tháng</h3>
                    <div class="price">250.000 VND</div>
                </div>
                <div class="package-features">
                    <ul>
                        <li>Truy cập không giới hạn</li>
                        <li>Hỗ trợ 24/7</li>
                        <li>Ưu tiên xử lý</li>
                    </ul>
                </div>
            </div>

            <div class="package-card @(_vipModel.Package == "6" ? "selected" : "")"
                @onclick="@(() => _vipModel.Package = "6")">
                <div class="package-header">
                    <h3>Gói 6 tháng</h3>
                    <div class="price">450.000 VND</div>
                </div>
                <div class="package-features">
                    <ul>
                        <li>Truy cập không giới hạn</li>
                        <li>Hỗ trợ 24/7</li>
                        <li>Ưu tiên xử lý</li>
                    </ul>
                </div>
            </div>

            <div class="package-card @(_vipModel.Package == "12" ? "selected" : "")"
                @onclick="@(() => _vipModel.Package = "12")">
                <div class="package-header">
                    <h3>Gói 12 tháng</h3>
                    <div class="price">800.000 VND</div>
                </div>
                <div class="package-features">
                    <ul>
                        <li>Truy cập không giới hạn</li>
                        <li>Hỗ trợ 24/7</li>
                        <li>Ưu tiên xử lý</li>
                    </ul>
                </div>
            </div>
        </div>

        <div class="d-flex justify-content-center">
            <Button Type="@ButtonType.Primary" Size="ButtonSize.Large" Loading="@isProcessing"
                OnClick="@(async () => await OnFinish(new EditContext(_vipModel)))">
                Đăng ký ngay
            </Button>
        </div>
    </div>
</div>

<style>
    .subscription-page {
        padding: 2rem;
        background-color: #f5f7fa;
        min-height: 100vh;
    }

    .subscription-header {
        text-align: center;
        margin-bottom: 3rem;
    }

    .subscription-header h1 {
        font-size: 2.5rem;
        color: #1a1a1a;
        margin: 1rem 0;
    }

    .subtitle {
        font-size: 1.1rem;
        color: #666;
        margin-bottom: 2rem;
    }

    .subscription-container {
        max-width: 1200px;
        margin: 0 auto;
    }

    .subscription-packages {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 2rem;
        margin-bottom: 3rem;
    }

    .package-card {
        background: white;
        border-radius: 12px;
        padding: 2rem;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        transition: all 0.3s ease;
        cursor: pointer;
        border: 2px solid transparent;
    }

    .package-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 8px 15px rgba(0, 0, 0, 0.1);
    }

    .package-card.selected {
        border-color: #1890ff;
        background-color: #f0f7ff;
    }

    .package-header {
        text-align: center;
        margin-bottom: 1.5rem;
    }

    .package-header h3 {
        font-size: 1.5rem;
        color: #1a1a1a;
        margin-bottom: 0.5rem;
    }

    .price {
        font-size: 1.8rem;
        color: #1890ff;
        font-weight: bold;
    }

    .package-features ul {
        list-style: none;
        padding: 0;
        margin: 0;
    }

    .package-features li {
        padding: 0.5rem 0;
        color: #666;
        display: flex;
        align-items: center;
    }

    .package-features li::before {
        content: "✓";
        color: #52c41a;
        margin-right: 0.5rem;
    }

    .subscription-action {
        text-align: center;
    }

    .subscription-action button {
        padding: 1rem 3rem;
        font-size: 1.1rem;
    }

        @@media(max - width: 768px) {
        .subscription-page {
            padding: 1rem;
        }

            .subscription-header h1 {
                font-size: 2rem;
            }

            .subscription-packages {
                grid-template-columns: 1fr;
            }
        }
    </style>

@code {
    HttpClient httpClient;
    private VipModel _vipModel = new();
    private bool isProcessing = false;

    private readonly Dictionary<string, (decimal Amount, VipStatus Plan)> packageDetails = new()
{
{ "1", (100000, VipStatus.Premium) },
{ "3", (250000, VipStatus.Premium) },
{ "6", (450000, VipStatus.Premium) },
{ "12", (800000, VipStatus.Premium) }
};

    protected override async Task OnInitializedAsync()
    {
        httpClient = HttpClientFactory.CreateClient("Auth");
    }

    public class VipModel
    {
        public string Package { get; set; }
    }

    private async Task OnFinish(EditContext editContext)
    {
        if (_vipModel.Package != null && packageDetails.TryGetValue(_vipModel.Package, out var packageDetail))
        {
            try
            {
                isProcessing = true;
                var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

                if (authState?.User == null)
                {
                    await _mess.Error("Phiên đăng nhập không hợp lệ. Vui lòng đăng nhập lại!");
                    Navigation.NavigateTo("/login", forceLoad: true);
                    return;
                }

                var userEmail = authState.User.FindFirst(ClaimTypes.Email)?.Value;


                if (string.IsNullOrEmpty(userEmail))
                {
                    await _mess.Error($"Không tìm thấy thông tin người dùng!");
                    return;
                }


                var order = new OrderCreateVM
                {

                    TotalAmount = packageDetail.Amount,
                    PurchasedPlan = packageDetail.Plan,
                    VipPrice = packageDetail.Amount,
                    VipExpirationDate = DateTime.Now.AddMonths(int.Parse(_vipModel.Package)),

                };


                var orderResponse = await httpClient.PostAsJsonAsync("/api/Order/create", order);
                if (!orderResponse.IsSuccessStatusCode)
                {
                    var error = await orderResponse.Content.ReadAsStringAsync();
                    await _mess.Error($"Lỗi khi tạo đơn hàng: {error}");
                    return;
                }
                var savedOrder = await orderResponse.Content.ReadFromJsonAsync<Order>();

                var paymentRequest = new VnPaymentRequestModel
                {
                    OrderId = savedOrder.Id,
                    ProductName = $"Gói VIP {_vipModel.Package} tháng",
                    Amount = (double)packageDetail.Amount,
                    Description = $"VIP-{packageDetail.Amount}-{userEmail}-{savedOrder.Id}",

                };

                var response = await httpClient.PostAsJsonAsync("/api/Payment/create", paymentRequest);
                if (!response.IsSuccessStatusCode)
                {
                    var error = await response.Content.ReadAsStringAsync();
                    await _mess.Error($"Lỗi khi tạo thanh toán: {error}");
                    return;
                }
                var paymentUrl = await response.Content.ReadAsStringAsync();

                Navigation.NavigateTo(paymentUrl, forceLoad: true);
            }
            catch (Exception ex)
            {
                await _mess.Error($"Lỗi khi tạo thanh toán: {ex.Message}");
                Console.WriteLine($"Error details: {ex}");
            }
            finally
            {
                isProcessing = false;
            }
        }
        else
        {
            await _mess.Error("Vui lòng chọn gói VIP!");
        }
    }
}