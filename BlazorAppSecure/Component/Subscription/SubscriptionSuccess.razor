@page "/subscription-success"
@using AntDesign
@using CourseManagement.Model.Model
@using CourseManagement.Model.Constant
@inject NavigationManager Navigation
@inject IMessageService _mess
@inject IHttpClientFactory HttpClientFactory

<div class="success-container">
    <Result Status="ResultStatus.Success" Title="Thanh toán thành công!"
        SubTitle="Cảm ơn bạn đã đăng ký. Bạn có thể bắt đầu sử dụng các tính năng VIP ngay bây giờ." Extra="extra">
    </Result>
</div>

@code {
    private RenderFragment extra => builder =>
    {
        builder.OpenComponent<Button>(0);
        builder.AddAttribute(1, "Type", ButtonType.Primary);
        builder.AddAttribute(2, "OnClick", EventCallback.Factory.Create<MouseEventArgs>(this, () =>
    Navigation.NavigateTo("/")));
        builder.AddContent(3, "Về trang chủ");
        builder.CloseComponent();
    };
}

<style>
    .success-container {
        max-width: 600px;
        margin: 40px auto;
        padding: 20px;
        background-color: #fff;
        border-radius: 8px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    }
</style>

@code {
    [Parameter]
    [SupplyParameterFromQuery(Name = "orderId")]
    public string OrderId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(OrderId))
        {
            await _mess.Error("Không tìm thấy thông tin đơn hàng!");
            Navigation.NavigateTo("/");
            return;
        }

        try
        {
            var httpClient = HttpClientFactory.CreateClient("Auth");
            var response = await httpClient.GetAsync($"/api/Order/{OrderId}");
            if (response.IsSuccessStatusCode)
            {
                await _mess.Success("Thanh toán thành công!");
            }
            else
            {
                await _mess.Error("Có lỗi xảy ra khi xử lý đơn hàng!");
            }
        }
        catch (Exception ex)
        {
            await _mess.Error($"Lỗi: {ex.Message}");
        }
    }
}