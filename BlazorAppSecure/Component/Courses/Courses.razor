@page "/courses"
@using System.ComponentModel.DataAnnotations
@using System.Text.Json
@using AntDesign.TableModels
@using BlazorAppSecure.Model
@using System.ComponentModel

@inject IHttpClientFactory HttpClientFactory
@inject IMessageService _mess
@inject ModalService ModelService;

<div class="mb-2">
    <Breadcrumb>
        <BreadcrumbItem Href="">
            <Icon Type="@IconType.Outline.Home" />
        </BreadcrumbItem>
        <BreadcrumbItem>
            Courses Management
        </BreadcrumbItem>
    </Breadcrumb>
</div>

<div class="d-flex justify-content-between align-items-center">
    <div class="total-course">
        <h6>Total course: @courseList?.Count()</h6>
    </div>
    <div class="mb-2">
        <Tooltip Title="Reload course data" Placement="Placement.Left">
            <Button Icon="@IconType.Outline.Reload" @onclick="FetchListCourse" />
        </Tooltip>
        <Button Icon="@IconType.Outline.PlusCircle" @onclick="_=>open()">Add New Course</Button>
    </div>
</div>

<Table DataSource="courseList" PageSize="12" ScrollX="1000" AutoHeight Loading="loadingCourseList" Bordered Striped="false">
    <ColumnDefinitions>
        <PropertyColumn Property="c=>c.Index"
                        Title="#"
                        Width="50"
                        Fixed="ColumnFixPlacement.Left"
                        Align="ColumnAlign.Center" 
                        class="index-col"
        >
            @(context.Index + 1)
        </PropertyColumn>
        <PropertyColumn Property="c=>c.Title"
                        Title="Title"
                        Width="270"
                        Fixed="ColumnFixPlacement.Left" 
                        class="title-col"
        />
        <PropertyColumn Property="u=>u.PreviewImage" Width="250" Title="Preview Image">
            <Image Src="@(string.IsNullOrEmpty(context.PreviewImage) ? previewImageUrl : context.PreviewImage)"
                   Fallback="@errorImageUrl" />
        </PropertyColumn>
        <PropertyColumn Property="c=>c.Description" Width="350" Title="Description">
            @context.Description
        </PropertyColumn>
        <PropertyColumn Property="c=>c.CategoryName" Width="200" Title="Category">
            <Tag>@context.CategoryName</Tag>
        </PropertyColumn>
        <PropertyColumn Property="c=>c.Level" Width="200" Title="Level">
            <Tag>@context.LevelName</Tag>
        </PropertyColumn>
        <PropertyColumn Property="c=>c.Status" Width="200" Title="Status">
            @if (context.Status == 0) {
                <Tag Color="TagColor.Red">Un Available</Tag>
            } else if (context.Status == 2) {
                <Tag Color="TagColor.Gold">In Progress</Tag>
            } else {
                <Tag>@context.StatusName</Tag>
            }
        </PropertyColumn>
        <PropertyColumn Property="c=>c.Level" Title="Total Enrolled" Width="150" Align="ColumnAlign.Center">
            0
        </PropertyColumn>
        <ActionColumn Title="Action" Width="120" Align="ColumnAlign.Center" Fixed="ColumnFixPlacement.Right">
            <CellRender Context="cellData">
                <Button Type="ButtonType.Text" Icon="@IconType.Outline.Edit" class="ant-btn-edit"></Button>
                <Button Type="ButtonType.Text" Icon="@IconType.Outline.Delete" Class="ant-btn-delete"></Button>
            </CellRender>
        </ActionColumn>
    </ColumnDefinitions>
    <ExpandTemplate>
        Expanded value
    </ExpandTemplate>
</Table>

<Drawer Closable="true" 
        @bind-Visible="visibleAddNewCourseDrawer" 
        Placement="DrawerPlacement.Right" 
        Title='("Add new course")'
        Width="500"
    >
    <Form Model="@courseModel" OnFinish="SubmitNewCourse">
        <Row Gutter="16">
            <AntDesign.Col Span="24">
                <Text>Title</Text>
                <FormItem>
                    <Input Placeholder="Please enter title" TValue="string" @bind-Value="@context.Title"></Input>
                </FormItem>
            </AntDesign.Col>
        </Row>
        <Row Gutter="16">
            <AntDesign.Col Span="24">
                <Text>Preview Image</Text>
                <FormItem>
                    <Input Placeholder="Please enter preview image url" TValue="string" @bind-Value="@context.PreviewImage"></Input>
                    @if (!string.IsNullOrEmpty(context.PreviewImage)) {
                        <Image class="mt-2" Src="@(string.IsNullOrEmpty(context.PreviewImage) ? previewImageUrl : context.PreviewImage)"
                               Fallback="@errorImageUrl" />
                    }
                </FormItem>
            </AntDesign.Col>
        </Row>
        <Row Gutter="16">
            <AntDesign.Col Span="24">
                <Text>Preview Video URL</Text>
                <FormItem>
                    <Input Placeholder="Please enter preview video url" TValue="string" @bind-Value="@context.PreviewVideoUrl"></Input>
                    @if (!string.IsNullOrEmpty(context.PreviewVideoUrl)) {
                        <div class="mt-2" style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
                            <iframe style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border: 0;"
                                    src="@GetYouTubeEmbedUrl(context.PreviewVideoUrl)"
                                    allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                                    allowfullscreen>
                            </iframe>
                        </div>
                    }
                </FormItem>
            </AntDesign.Col>
        </Row>
        <Row Gutter="16">
            <AntDesign.Col Span="24">
                <Text>Level</Text>
                <FormItem>
                    <Segmented @bind-Value="context.Level">
                        <SegmentedItem Label="Beginner" Value=@(1) />
                        <SegmentedItem Label="Intermediate" Value=@(2) />
                        <SegmentedItem Label="Advanced" Value=@(3) />
                        <SegmentedItem Label="Expert" Value=@(4) />
                    </Segmented>
                </FormItem>
            </AntDesign.Col>
        </Row>
        <Row Gutter="16">
            <AntDesign.Col Span="24">
                <Text>Description</Text>
                <FormItem>
                    <TextArea Placeholder="Please enter description" AutoSize="true" @bind-Value="@context.Description" />
                </FormItem>
            </AntDesign.Col>
        </Row>
        <Row Gutter="16">
            <AntDesign.Col Span="24">
                <Text>Category</Text>
                <FormItem>
                    <div class="d-flex gap-1">
                        <Select DataSource="@categoryList"
                                @bind-Value="@context.CategoryId"
                                ItemValue="p=>p.Id"
                                ItemLabel="p=>p.Name"
                                Placeholder="Select a category"
                                EnableSearch
                                AutoClearSearchValue="false"
                                Loading="loadingListCategory">
                        </Select>
                        <Tooltip Title="Add new category">
                            <Button Icon="@IconType.Outline.PlusCircle" @onclick="HandleOpenAddCategoryModel" />
                        </Tooltip>
                        <Tooltip Title="Reload list category">
                            <Button Icon="@IconType.Outline.Reload" @onclick="FetchListCategory" Loading="loadingListCategory" />
                        </Tooltip>
                    </div>
                </FormItem>
            </AntDesign.Col>
        </Row>
        <Row Gutter="16">
            <AntDesign.Col Span="24">
                <Text>Course Status</Text>
                <FormItem>
                    <Segmented @bind-Value="context.IsProCourse" Size="SegmentedSize.Large">
                        <SegmentedItem Value="true" Label="Pro Course" />
                        <SegmentedItem Value="false" Label="Free Course" />
                    </Segmented>
                </FormItem>
            </AntDesign.Col>
        </Row>
        <Row Class="mt-3">
            <Col Span="24" Class="d-flex justify-content-end gap-2">
                <Button Type="ButtonType.Default" @onclick="close">Cancel</Button>
                <Button Type="ButtonType.Primary" HtmlType="HtmlType.Submit">Submit</Button>
            </Col>
        </Row>
    </Form>
</Drawer>

@code {
    string previewImageUrl = "https://placehold.co/1920x1080?text=Preview%20Image&font=roboto";
    string errorImageUrl = "https://placehold.co/1920x1080?text=This%20Image%20Is%20Error&font=roboto";
    HttpClient httpClient;

    private IQueryable<CoursesModel> courseList;
    private IQueryable<CategoiesModel> categoryList;

    CourseModel courseModel = new();
    CategoyModel categoryModel = new();

    bool loadingCourseList = false;
    bool loadingListCategory = false;

    bool visibleAddNewCourseDrawer = false;
    bool visibleAddNewCategoryModal = false;

    private Form<CategoyModel> _form;

    RenderFragment FormTemplate() {
        return
        @<Form Model="@categoryModel" OnFinish="SubmitNewCategory" @ref="@_form">
            <Row Gutter="16">
                <AntDesign.Col Span="24">
                    <Text>Title</Text>
                    <FormItem>
                        <Input Placeholder="Please enter name" TValue="string" @bind-Value="@context.Name"></Input>
                    </FormItem>
                </AntDesign.Col>
            </Row>
            <Row Gutter="16">
                <AntDesign.Col Span="24">
                    <Text>Description</Text>
                    <FormItem>
                        <TextArea Placeholder="Please enter description" AutoSize="true" @bind-Value="@context.Description" />
                    </FormItem>
                </AntDesign.Col>
            </Row>
        </Form>
    ;
    }

    private readonly JsonSerializerOptions jsonSerializerOptions = new() {
        PropertyNamingPolicy = JsonNamingPolicy.CamelCase
    };

    protected override async Task OnInitializedAsync() {
        httpClient = HttpClientFactory.CreateClient("Auth");

        FetchListCourse();
        FetchListCategory();
        await base.OnInitializedAsync();
    }

    void open() {
        courseModel = new();
        this.visibleAddNewCourseDrawer = true;
    }

    void close() {
        this.visibleAddNewCourseDrawer = false;
        StateHasChanged();
    }

    async void FetchListCourse() {
        loadingCourseList = true;
        var result = await httpClient.GetAsync("/api/Course/search");

        if (result.IsSuccessStatusCode) {
            var resposne = await result.Content.ReadAsStringAsync();
            var values = JsonSerializer.Deserialize<CoursesModel[]>(resposne, jsonSerializerOptions);
            if (values != null) {
                courseList = values.Select((item, index) => {
                    item.Index = index;
                    return item;
                }).ToList().AsQueryable();
            }
        } else {
            await _mess.Error("Internal server error when load list course");
        }
        loadingCourseList = false;
        StateHasChanged();
    }

    async void FetchListCategory() {
        loadingListCategory = true;
        var result = await httpClient.GetAsync("/api/Category/list");

        if (result.IsSuccessStatusCode) {
            var resposne = await result.Content.ReadAsStringAsync();
            var values = JsonSerializer.Deserialize<CategoiesModel[]>(resposne, jsonSerializerOptions);
            if (values != null) {
                categoryList = values.ToList().AsQueryable();
                courseModel.CategoryId = 0;
            }
        } else {
            await _mess.Error("Internal server error when load list category");
        }
        loadingListCategory = false;
        StateHasChanged();
    }

    async void SubmitNewCourse() {
        try {
            var response = await httpClient.PostAsJsonAsync("/api/Course/add", courseModel);

            if (response.IsSuccessStatusCode) {
                close();
                FetchListCourse();
                await _mess.Success("Course added successfully");
            } else {
                await _mess.Error("Failed to add course");
            }
        } catch (Exception ex) {
            await _mess.Error($"Error: {ex.Message}");
        }
    }

    void HandleOpenAddCategoryModel() {
        ModalRef modalRef = default;
        modalRef = ModelService.CreateModal(new() {
            Content = FormTemplate(),
            OnOk = async e => {
                modalRef?.SetConfirmLoading(true);
                if (!_form.Validate()) {
                    modalRef?.SetConfirmLoading(false);
                    return;
                }

                _form.Submit();

                await modalRef.CloseAsync();

                _form.Reset();
            },
            OnCancel = async e => {
                if (!_form.IsModified || await ModelService.ConfirmAsync(new() { Content = "Are you sure you want to discard the entries?" })) {
                    await modalRef.CloseAsync();
                    _form.Reset();
                }
            },
        });
    }

    async void SubmitNewCategory() {
        try {
            var response = await httpClient.PostAsJsonAsync("/api/Category/add", categoryModel);

            if (response.IsSuccessStatusCode) {
                FetchListCategory();
                await _mess.Success("Category added successfully");
            } else {
                await _mess.Error("Failed to add category");
            }
        } catch (Exception ex) {
            await _mess.Error($"Error: {ex.Message}");
        }
        StateHasChanged();
    }

    void HandleOk(MouseEventArgs e) {
        if (!_form.Validate()) {
            visibleAddNewCategoryModal = true;
        }
    }

    private string GetYouTubeEmbedUrl(string url) {
        if (string.IsNullOrEmpty(url)) return "";

        string videoId = "";

        if (url.Contains("youtube.com/watch")) {
            var uri = new Uri(url);
            var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
            videoId = query["v"];
        } else if (url.Contains("youtu.be")) {
            videoId = url.Split('/').Last();
        } else if (url.Length == 11) {
            videoId = url;
        }

        return $"https://www.youtube.com/embed/{videoId}";
    }
}

<style>
    .total-course {
        h6 {
            color: darkorange
        }
    }

    thead .ant-table-row-expand-icon-cell {
        position: sticky !important;
        left: 0px !important;
        z-index: 2 !important;
    }

    tbody .ant-table-row-expand-icon-cell {
        position: sticky !important;
        left: 0px !important;
        background: #fff !important;
        z-index: 2 !important;
    }

    .index-col {
        position: sticky !important;
        left: 48px !important;
    }

    .title-col {
        position: sticky !important;
        left: 98px !important;
    }
</style>