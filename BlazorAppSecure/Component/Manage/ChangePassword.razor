@using AntDesign
@using AntDesign.Form
@using AntDesign.Forms
@using BlazorAppSecure.Model

@inject BlazorAppSecure.Sevices.Profile.IAccountService AccountService
@inject IMessageService _mess

<div class="password-section">
    <form @onsubmit="HandleSubmit">
        <div class="form-group">
            <label class="form-label">Current Password</label>
            <input type="password" class="form-input" @bind="changePasswordModel.CurrentPassword" />
        </div>

        <div class="form-group">
            <label class="form-label">New Password</label>
            <input type="password" class="form-input" @bind="changePasswordModel.NewPassword" />
            <p class="form-helper">Password must be at least 8 characters long</p>
        </div>

        <div class="form-group">
            <label class="form-label">Confirm Password</label>
            <input type="password" class="form-input" @bind="changePasswordModel.ConfirmPassword" />
        </div>

        <button type="submit" class="btn btn-primary">Change Password</button>
    </form>
</div>

<style>
    .manage-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
    }

    .page-header {
        margin-bottom: 30px;
    }

    .page-title {
        font-size: 28px;
        color: #333;
        margin-bottom: 10px;
    }

    .page-subtitle {
        color: #666;
        font-size: 16px;
    }

    .nav-menu {
        background: white;
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }

    .nav-list {
        display: flex;
        border-bottom: 1px solid #eee;
        padding: 0;
        margin: 0;
        list-style: none;
    }

    .nav-item {
        padding: 15px 25px;
        color: #555;
        text-decoration: none;
        border-bottom: 2px solid transparent;
        transition: all 0.3s ease;
    }

        .nav-item:hover {
            color: #2563eb;
            border-bottom-color: #2563eb;
        }

        .nav-item.active {
            color: #2563eb;
            border-bottom-color: #2563eb;
        }

    .content-area {
        background: white;
        border-radius: 8px;
        padding: 25px;
        margin-top: 20px;
    }

    .form-group {
        margin-bottom: 20px;
    }

    .form-label {
        display: block;
        margin-bottom: 8px;
        color: #333;
        font-weight: 500;
    }

    .form-input {
        width: 100%;
        padding: 10px;
        border: 1px solid #ddd;
        border-radius: 6px;
        font-size: 15px;
    }

        .form-input:focus {
            outline: none;
            border-color: #2563eb;
            box-shadow: 0 0 0 2px rgba(37,99,235,0.1);
        }

    .form-helper {
        font-size: 14px;
        color: #666;
        margin-top: 5px;
    }

    .btn {
        padding: 10px 20px;
        border: none;
        border-radius: 6px;
        cursor: pointer;
        font-size: 15px;
        transition: all 0.3s ease;
    }

    .btn-primary {
        background: #2563eb;
        color: white;
    }

        .btn-primary:hover {
            background: #1d4ed8;
        }

    .vip-card {
        padding: 20px;
        border-radius: 8px;
        text-align: center;
    }

    .vip-inactive {
        background: linear-gradient(145deg, #f3f4f6, #ffffff);
        border: 1px solid #eee;
    }

    .vip-active {
        background: linear-gradient(145deg, #4f46e5, #7c3aed);
        color: white;
    }

    .vip-title {
        font-size: 20px;
        font-weight: 600;
        margin-bottom: 15px;
        color: white;
    }

    .vip-timer {
        font-size: 24px;
        font-weight: bold;
        color: #fbbf24;
        margin: 15px 0;
    }
</style>

@code {
    private ChangePasswordModel changePasswordModel = new ChangePasswordModel();

    private async Task HandleSubmit()
    {
        if (string.IsNullOrWhiteSpace(changePasswordModel.NewPassword) ||
            string.IsNullOrWhiteSpace(changePasswordModel.ConfirmPassword))
        {
            await _mess.Error("New password and confirmation cannot be empty.");
            return;
        }

        if (changePasswordModel.NewPassword != changePasswordModel.ConfirmPassword)
        {
            await _mess.Error("New password and confirmation do not match.");
            return;
        }
        try
        {
            var result = await AccountService.ChangePassword(changePasswordModel);
            Console.WriteLine(result);
            if (!result.IsSuccess) 
            {
                await _mess.Error(result.Message);
            }
            else
            {   
                await _mess.Success("Password updated successfully.");
            }

        }
        catch (Exception ex)
        {
            await _mess.Error($"Error updating profile: {ex.Message}");
        }
    }
}
