@using AntDesign
@using AntDesign.Form
@using AntDesign.Forms
@using BlazorAppSecure.Model

@inject BlazorAppSecure.Sevices.Profile.IAccountService AccountService
@inject IMessageService _mess

<div class="space-y-6">
    <div class="shrink-0 bg-border h-[1px] w-full"></div>
    <Form Model="changePasswordModel" OnFinish="HandleSubmit" class="space-y-8" Layout="FormLayout.Vertical">
        <FormItem Label="Current Pasword" Name="CurrentPassword">
            <InputPassword @bind-Value="changePasswordModel.CurrentPassword"/>
            
        </FormItem>

        <FormItem Label="New Password" Name="NewPassword">
            <InputPassword @bind-Value="changePasswordModel.NewPassword"/>

        </FormItem>

        <FormItem Label="Confirm Password" Name="ConfirmPassword">
            <InputPassword @bind-Value="changePasswordModel.ConfirmPassword" />
        </FormItem>


        <FormItem>
            <Button Type="ButtonType.Primary" HtmlType="submit">Change Password</Button>
        </FormItem>
    </Form>
</div>

@code {
    private ChangePasswordModel changePasswordModel = new ChangePasswordModel();

    private async Task HandleSubmit()
    {
        if (string.IsNullOrWhiteSpace(changePasswordModel.NewPassword) ||
            string.IsNullOrWhiteSpace(changePasswordModel.ConfirmPassword))
        {
            await _mess.Error("New password and confirmation cannot be empty.");
            return;
        }

        if (changePasswordModel.NewPassword != changePasswordModel.ConfirmPassword)
        {
            await _mess.Error("New password and confirmation do not match.");
            return;
        }
        try
        {
            var result = await AccountService.ChangePassword(changePasswordModel);
            Console.WriteLine(result);
            if (!result.IsSuccess) 
            {
                await _mess.Error(result.Message);
            }
            else
            {   
                await _mess.Success("Password updated successfully.");
            }

        }
        catch (Exception ex)
        {
            await _mess.Error($"Error updating profile: {ex.Message}");
        }
    }
}
