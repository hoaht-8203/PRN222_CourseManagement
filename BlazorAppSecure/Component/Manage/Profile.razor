@using AntDesign
@using BlazorAppSecure.Model
@using BlazorAppSecure.Sevices.Profile
@using System.Timers

@inject IAccountService ProfileService
@inject IMessageService _mess
@inject NavigationManager Navigation

<div class="profile-section">
    <form @onsubmit="HandleSubmit">
        <div class="form-group">
            <label class="form-label">Full Name</label>
            <input type="text" class="form-input" @bind="userModel.FullName" />
            <p class="form-helper">This name will be displayed in this application.</p>
        </div>

        <div class="form-group">
            <label class="form-label">Email</label>
            <input type="email" class="form-input" @bind="userModel.Email" disabled />
            <p class="form-helper">Contact admin for email changes</p>
        </div>

        <div class="form-group">
            <label class="form-label">Phone Number</label>
            <input type="tel" class="form-input" @bind="userModel.PhoneNumber" />
        </div>

        <button type="submit" class="btn btn-primary">Update Profile</button>
    </form>

    <AuthorizeView Roles="User">
        <div class="vip-section mt-2">
            @if (userModel.VipStatus == 0) {
                <div class="vip-card vip-inactive">
                    <h3 class="vip-title">Upgrade to VIP</h3>
                    <p>Get access to premium features!</p>
                    <button class="btn btn-primary" @onclick="goVIP">
                        Activate Now
                    </button>
                </div>
            } else {
                <div class="vip-card vip-active">
                    <h3 class="vip-title">VIP Member</h3>
                    <p>Time Remaining:</p>
                    <div class="vip-timer">@countdown</div>
                </div>
            }
        </div>
    </AuthorizeView>
</div>

<style>
    .manage-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
    }

    .page-header {
        margin-bottom: 30px;
    }

    .page-title {
        font-size: 28px;
        color: #333;
        margin-bottom: 10px;
    }

    .page-subtitle {
        color: #666;
        font-size: 16px;
    }

    .nav-menu {
        background: white;
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }

    .nav-list {
        display: flex;
        border-bottom: 1px solid #eee;
        padding: 0;
        margin: 0;
        list-style: none;
    }

    .nav-item {
        padding: 15px 25px;
        color: #555;
        text-decoration: none;
        border-bottom: 2px solid transparent;
        transition: all 0.3s ease;
    }

        .nav-item:hover {
            color: #2563eb;
            border-bottom-color: #2563eb;
        }

        .nav-item.active {
            color: #2563eb;
            border-bottom-color: #2563eb;
        }

    .content-area {
        background: white;
        border-radius: 8px;
        padding: 25px;
        margin-top: 20px;
    }

    .form-group {
        margin-bottom: 20px;
    }

    .form-label {
        display: block;
        margin-bottom: 8px;
        color: #333;
        font-weight: 500;
    }

    .form-input {
        width: 100%;
        padding: 10px;
        border: 1px solid #ddd;
        border-radius: 6px;
        font-size: 15px;
    }

        .form-input:focus {
            outline: none;
            border-color: #2563eb;
            box-shadow: 0 0 0 2px rgba(37,99,235,0.1);
        }

    .form-helper {
        font-size: 14px;
        color: #666;
        margin-top: 5px;
    }

    .btn {
        padding: 10px 20px;
        border: none;
        border-radius: 6px;
        cursor: pointer;
        font-size: 15px;
        transition: all 0.3s ease;
    }

    .btn-primary {
        background: #2563eb;
        color: white;
    }

        .btn-primary:hover {
            background: #1d4ed8;
        }

    .vip-card {
        padding: 20px;
        border-radius: 8px;
        text-align: center;
    }

    .vip-inactive {
        background: linear-gradient(145deg, #f3f4f6, #ffffff);
        border: 1px solid #eee;
    }

    .vip-active {
        background: linear-gradient(145deg, #4f46e5, #7c3aed);
        color: white;
    }

    .vip-title {
        font-size: 20px;
        font-weight: 600;
        margin-bottom: 15px;
        color: white;
    }

    .vip-timer {
        font-size: 24px;
        font-weight: bold;
        color: #fbbf24;
        margin: 15px 0;
    }
</style>

@code {
    private UserViewModel userModel = new UserViewModel();
    private string countdown = "";
    private System.Timers.Timer timer;

    protected override async Task OnInitializedAsync()
    {
        await LoadProfile();
        if (userModel.VipStatus != 0 && userModel.VipExpirationDate != null)
        {
            StartCountdown();
        }
    }
    private async Task LoadProfile(){
        try
        {
            userModel = await ProfileService.GetMyProfile();
        }
        catch (Exception ex)
        {
            await _mess.Error($"Error loading profile: {ex.Message}");
        }
    }
    private async Task HandleSubmit()
    {
        try
        {
            await ProfileService.UpdateProfile(userModel.Email, userModel);
            await _mess.Success("Update profile successfully");
            await LoadProfile();
        }
        catch (Exception ex)
        {
            await _mess.Error($"Error updating profile: {ex.Message}");
        }
    }
    private void goVIP()
    {
        Navigation.NavigateTo("/vip-subscription");
    }
    private void StartCountdown()
    {
        if (userModel.VipExpirationDate <= DateTime.Now)
        {
            countdown = "VIP expired!";
            StateHasChanged();
            return;
        }

        timer = new System.Timers.Timer(1000);
        timer.Elapsed += UpdateCountdown;
        timer.AutoReset = true;
        timer.Enabled = true;
    }

    private void UpdateCountdown(object source, ElapsedEventArgs e)
    {
        var timeRemaining = userModel.VipExpirationDate.Value - DateTime.Now;
        if (timeRemaining.TotalSeconds <= 0)
        {
            InvokeAsync(() =>
            {
                countdown = "VIP expired!";
                timer?.Stop();
                StateHasChanged();
            });
        }
        else
        {
            InvokeAsync(() =>
            {
                countdown = $"{timeRemaining.Days} days {timeRemaining.Hours} hours {timeRemaining.Minutes} minutes {timeRemaining.Seconds} seconds";
                StateHasChanged();
            });
        }
    }
}
