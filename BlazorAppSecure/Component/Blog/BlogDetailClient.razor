@page "/listblogs/detail/{blogId:int}"
@using AntDesign
@using BlazorAppSecure.Model
@using BlazorAppSecure.Sevices.Blog
@using CourseManagement.Model.DTOs
@using Microsoft.AspNetCore.SignalR.Client

@inject NavigationManager NavigationManager
@inject IBlogService BlogService
@inject IMessageService _message
@inject IHttpClientFactory HttpClientFactory
@inject AuthenticationStateProvider AuthState
@inject IMessageService _mess
@inject HubConnection HubConnection

<PageTitle>Blog Detail</PageTitle>

<div class="mb-2">
    <Breadcrumb>
        <BreadcrumbItem Href="">
            Home
        </BreadcrumbItem>
        <BreadcrumbItem Href="/listBlog">
            Blog Management
        </BreadcrumbItem>
        <BreadcrumbItem>
            @blog?.Title
        </BreadcrumbItem>
    </Breadcrumb>
</div>

@if (loading)
{
    <div style="text-align: center;">
        <Spin />
    </div>
}
else if (blog == null)
{
    <div style="text-align: center; color: #888;">Blog not found.</div>
}
else
{
    <div class="blog-detail-container">
        <!-- Blog Content -->
        <div class="blog-content">
            <h1 class="blog-title">@blog.Title</h1>
            <!-- Hiển thị hình ảnh nếu có -->
            @if (!string.IsNullOrEmpty(blog.UrlImage))
            {
                <div class="blog-image">
                    <img src="@blog.UrlImage" alt="@blog.Title" class="cover-image" />
                </div>
            }
            else
            {
                <div class="blog-image-placeholder">
                    <img src="https://placehold.co/800x400?text=No+Image" alt="No Image Available" class="cover-image" />
                </div>
            }
            <div class="author-info">
                <img src="https://placehold.co/40x40?text=A" alt="Avatar" class="avatar" />
                <div class="author-details">
                    <span class="author-name">Admin Team · @blog.CreatedAt.ToString("dd/MM/yyyy HH:mm")</span>
                    <span class="reading-time">@CalculateReadingTime(blog.Content) minutes read</span>
                </div>
            </div>
            <div class="metrics">
                <span><Icon Type="eye" /> @blog.ViewCount</span>
                <span><Icon Type="message" /> 0</span>
                <span><Icon Type="share-alt" /> 0</span>
            </div>
            <div class="tag-section">
                @if (blog.Categories != null && blog.Categories.Any())
                {
                    foreach (var category in blog.Categories)
                    {
                        <span class="tag">@category.Name</span>
                    }
                }
                else
                {
                    <span class="tag">No Tag</span>
                }
            </div>
            <div class="blog-body">
                @((MarkupString)blog.Content)
            </div>
            <div class="comments-section">
                <!-- Ô nhập comment -->
                <div style="display: flex; align-items: center; gap: 10px; width: 100%;">
                    <Avatar Icon="user" />
                    <TextArea @bind-Value="newComment"
                              Placeholder="Write a comment..."
                              Style="flex-grow: 1;" />

                </div>
                <div style="margin-top: 12px; display:flex ;justify-content:flex-end">
                    <Button Type="ButtonType.Primary" OnClick="SubmitComment">Submit</Button>

                </div>
                <Divider />

                <!-- Danh sách comment -->
                <div class="comments-list">
                    @foreach (var comment in comments)
                    {
                        <div class="comment-item">
                            <div style="margin-bottom: 8px">
                                <Avatar Icon="user" />
                                <strong>@comment.Username</strong>
                            </div>
                            <p>@comment.Content</p>
                            <Divider />
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public int blogId { get; set; }
    private BlogModel? blog;
    private bool loading = true;
    private bool hasIncrementedView = false;
    private System.Timers.Timer? readingTimer;
    private string newComment = "";
    private List<CourseManagement.Model.DTOs.CommentDTO> comments = new();
    private HttpClient httpClient;

    protected override async Task OnInitializedAsync() {
        try {
            httpClient = HttpClientFactory.CreateClient("Auth");
            loading = true;
            blog = await BlogService.GetBlogById(blogId);

            if (blog != null) {
                // Tạo timer với thời gian đọc được tính toán
                var readingTimeInMilliseconds = CalculateReadingTime(blog.Content) * 60 * 1000; // Chuyển phút thành milliseconds
                readingTimer = new System.Timers.Timer(readingTimeInMilliseconds);
                readingTimer.Elapsed += async (sender, e) => await OnReadingTimeCompleted();
                readingTimer.AutoReset = false; // Chỉ chạy một lần
                readingTimer.Start();
            }
            await LoadComments();

            await HubConnection.StartAsync();
            await _mess.Error(HubConnection.State.ToString());

            if (HubConnection.State != HubConnectionState.Connected)
            {
                await _mess.Error("SignalR is not connected.");

            }
            if (HubConnection != null)
            {
                try
                {
                    await HubConnection.SendAsync("JoinBlogGroup", blogId.ToString());
                }
                catch (Exception ex)
                {
                    await _mess.Error($"Error joining blog group: {ex.Message}");
                }
            }
            else
            {
                _mess.Error("HubConnection is null");
            }
            HubConnection.On<CommentDTO>("ReceiveBlogComment", async (comment) =>
            {
                if (comment.BlogId == blogId)
                {
                    comments.Add(new CommentDTO
                        {
                            Content = comment.Content,
                            BlogId = comment.BlogId,
                            Username = comment.Username
                        });
                    StateHasChanged();
                }

            });

            
        } catch (Exception ex) {
            await _message.Error($"Error loading blog detail: {ex.Message}");
        } finally {
            loading = false;
            StateHasChanged();
        }
    }

    private async Task LoadComments()
    {
        try
        {
            var response = await httpClient.GetAsync($"/api/Comment/blog?blogID={blogId}");
            if (response.IsSuccessStatusCode)
            {
                var commentsFetched = await response.Content.ReadFromJsonAsync<List<CourseManagement.Model.Model.Comment>>();
                foreach (var comment in commentsFetched)
                {
                    comments.Add(new CourseManagement.Model.DTOs.CommentDTO { Content = comment.Content, BlogId = comment.BlogId, Username = comment.User.UserName });
                }
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            await _mess.Error($"Error loading comments: {ex.Message}");
        }
    }


    private async Task OnReadingTimeCompleted() {
        // Đảm bảo chỉ tăng view một lần
        if (!hasIncrementedView && blog != null) {
            try {
                var newViewCount = await BlogService.IncrementViewCount(blogId);
                await InvokeAsync(() => {
                    blog.ViewCount = newViewCount;
                    hasIncrementedView = true;
                    StateHasChanged();
                });
            } catch (Exception ex) {
                await InvokeAsync(() => _message.Error("Không thể cập nhật lượt xem"));
            }
        }
    }

    public void Dispose() {
        // Cleanup timer khi component bị dispose
        if (readingTimer != null) {
            readingTimer.Dispose();
        }
    }

    private int CalculateReadingTime(string content)
    {
        if (string.IsNullOrEmpty(content)) return 0;
        var wordCount = content.Split(new[] { ' ', '\t', '\n' }, StringSplitOptions.RemoveEmptyEntries).Length;
        return (int)Math.Ceiling(wordCount / 200.0); // Giả định 200 từ/phút
    }
    private async Task SubmitComment()
    {
        if (string.IsNullOrWhiteSpace(newComment)) return;

        var Username = (await AuthState.GetAuthenticationStateAsync()).User.Identity.Name;
        var comment = new CourseManagement.Model.DTOs.CommentDTO { BlogId = blogId, Content = newComment, Username = Username ?? "Anonymous" };
        var jsonComment = System.Text.Json.JsonSerializer.Serialize(comment);
        await httpClient.PostAsJsonAsync("/api/Comment", comment);
        newComment = "";
        StateHasChanged();
        await HubConnection.SendAsync("SendBlogComment", comment);

    }
}

<style>
    .blog-detail-container {
        max-width: 800px;
        margin: 0 auto;
        padding: 20px;
    }

    .blog-content {
        background-color: #fff;
        padding: 25px;
        border-radius: 15px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.1);
    }

    .blog-title {
        font-family: 'Montserrat', sans-serif;
        font-size: 2.2em;
        font-weight: 700;
        color: #333;
        margin-bottom: 15px;
    }

    .blog-image, .blog-image-placeholder {
        margin-bottom: 20px;
        text-align: center;
    }

    .cover-image {
        width: 100%;
        max-height: 400px;
        object-fit: cover;
        border-radius: 10px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    }

    .author-info {
        display: flex;
        align-items: center;
        margin-bottom: 20px;
    }

    .avatar {
        border-radius: 50%;
        margin-right: 12px;
    }

    .author-details {
        flex-grow: 1;
    }

    .author-name {
        font-family: 'Roboto', sans-serif;
        font-size: 0.95em;
        color: #444;
        margin-right: 10px;
    }

    .reading-time {
        font-family: 'Roboto', sans-serif;
        font-size: 0.9em;
        color: #666;
    }

    .metrics {
        display: flex;
        gap: 15px;
        font-family: 'Roboto', sans-serif;
        font-size: 0.9em;
        color: #888;
        margin-bottom: 20px;
    }

    .metrics span {
        display: flex;
        align-items: center;
        gap: 5px;
    }

    .tag-section {
        margin-bottom: 20px;
    }

    .tag {
        font-family: 'Roboto', sans-serif;
        background-color: #e6e6e6;
        padding: 5px 12px;
        border-radius: 12px;
        font-size: 0.85em;
        color: #555;
        margin-right: 10px;
    }

    .blog-body {
        font-family: 'Roboto', sans-serif;
        font-size: 1em;
        line-height: 1.6;
        color: #333;
    }

   
</style>