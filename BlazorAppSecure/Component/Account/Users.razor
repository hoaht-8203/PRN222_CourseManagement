@page "/users"

@using BlazorAppSecure.Model
@using BlazorAppSecure.Sevices
@using Microsoft.AspNetCore.Authorization
@using AntDesign
@using System.ComponentModel

@attribute [Authorize(Roles = "Admin")]

@inject IAccountManagement Acct
@inject NavigationManager Navigation

<div class="mb-2">
    <Breadcrumb>
        <BreadcrumbItem Href="">
            <Icon Type="@IconType.Outline.Home" />
        </BreadcrumbItem>
        <BreadcrumbItem>
            User Management
        </BreadcrumbItem>
    </Breadcrumb>
</div>

<Table DataSource="userList" PageSize="12" ScrollX="1000" ScrollY="400">
    <PropertyColumn Property="u=>u.Email" Width="200" Fixed="ColumnFixPlacement.Left" />
    <PropertyColumn Property="u=>u.FullName" Width="200" Title="FullName" >
        @if (context.FullName != null) {
            @context.FullName
        } else {
            <Tag Color="TagColor.Orange">Null</Tag>
        }
    </PropertyColumn>
    <PropertyColumn Property="c=>c.UserName" Width="200" Title="UserName" />
    <PropertyColumn Property="c=>c.Roles" Width="200" Title="Roles">
        @if (context.Roles != null && context.Roles?.Count > 0) {
            @foreach (var item in context.Roles) {
                <Tag>@item</Tag>
            }
        } else {
            <Tag Color="TagColor.Orange">Null</Tag>
        }
    </PropertyColumn>
    <PropertyColumn Property="c=>c.EmailConfirmed" Width="150" Title="Email Confirmed">
        <Switch Checked="@context.EmailConfirmed" Disabled />
    </PropertyColumn>
    <PropertyColumn Property="c=>c.PhoneNumber" Width="150" Title="Phone Number">
        @if (context.PhoneNumber != null) {
            @context.PhoneNumber
        } else {
            <Tag Color="TagColor.Orange">Null</Tag>
        }
    </PropertyColumn>
    <PropertyColumn Property="c=>c.PhoneNumberConfirmed" Width="200" Title="Phone Number Confirmed">
        <Switch Checked="@context.PhoneNumberConfirmed" Disabled />
    </PropertyColumn>
    <ActionColumn Title="Action" Width="100" Align="ColumnAlign.Center" Fixed="ColumnFixPlacement.Right">
        <CellRender Context="cellData">
            <Button Type="ButtonType.Text" Icon="@IconType.Outline.Edit" @onclick="@(() => Edit(context))"></Button>
            <Button Danger Type="ButtonType.Text" Icon="@IconType.Outline.Delete"></Button>
        </CellRender>
    </ActionColumn>
</Table>

@* <div class="grid" tabindex="-1">
    <QuickGrid Items="@userList">
        <PropertyColumn Property="@(p => p.UserName)" Sortable="true" />
        <PropertyColumn Property="@(p => p.Email)" Sortable="true" />
        <TemplateColumn Title="Roles" Sortable="false">
            <div class="flex items-center">
                <nobr>
                    @if (context.Roles != null && context.Roles?.Count > 0 )
                    {
                        <ul>
                    @foreach (var item in context.Roles)
                    {
                        <li>
                        <strong>@item</strong>
                                </li>
                        }
                        </ul>
                    }
               
                    else
                    {
                        <strong>------</strong>
                    }
                </nobr>
            </div>
        </TemplateColumn>
        <PropertyColumn Property="@(p => p.PhoneNumber)"  Sortable="true" />
             <TemplateColumn Title="Actions">

                <button class="btn btn-primary" @onclick="@(() => Edit(context))"> 
                   Edit
                </button>
                <button class="btn p-1 btn-danger" @onclick="@(() => Delete(context))">
                   Delete
                </button>
            </TemplateColumn>
    </QuickGrid>
</div> *@

@code {
    private IQueryable<UserViewModel> userList;

    protected override async Task OnInitializedAsync()
    {
        var users = await Acct.GetUsers();
        userList = users.ToList().AsQueryable();
        await base.OnInitializedAsync();
    }

    void Edit(UserViewModel p)
    {
        Navigation.NavigateTo($"editupdateuser/{p.Email}");        
    }

    async void Delete(UserViewModel p)
    {
        if(await Acct.Delete(p.Email))
        {
            var users = await Acct.GetUsers();
            userList = users.ToList().AsQueryable();
            StateHasChanged();
        }
    }
}
