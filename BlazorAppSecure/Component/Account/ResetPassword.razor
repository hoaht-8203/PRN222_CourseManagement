@page "/reset-password"

@using AntDesign
@using System.ComponentModel.DataAnnotations
@inject NavigationManager Navigation
@inject IMessageService _message
@inject IHttpClientFactory HttpClientFactory
@layout EmptyLayout

<PageHeader Title="Reset Password" SubTitle="Enter your new password below" />

<Card Style="width: 500px; margin: auto;">
    <ChildContent>
        <Form Model="@resetPasswordModel" OnFinish="OnResetPassword" LabelColSpan="8">
            <FormItem Label="Email">
                <Input @bind-Value="resetPasswordModel.Email" Disabled="true" />
            </FormItem>
            <FormItem Label="New Password">
                <InputPassword @bind-Value="resetPasswordModel.NewPassword" />
            </FormItem>
            <FormItem Label="Confirm Password">
                <InputPassword @bind-Value="resetPasswordModel.ConfirmPassword" />
            </FormItem>
            <FormItem>
                <Button Type="ButtonType.Primary" HtmlType="submit">
                    Reset Password
                </Button>
            </FormItem>
        </Form>
    </ChildContent>
</Card>

@code {
    private HttpClient httpClient;
    public class ResetPasswordModel
    {
        [Required, EmailAddress]
        public string Email { get; set; }

        [Required, MinLength(6, ErrorMessage = "Password must be at least 6 characters long.")]
        public string NewPassword { get; set; }

        [Required, Compare(nameof(NewPassword), ErrorMessage = "Passwords do not match.")]
        public string ConfirmPassword { get; set; }

        public string Token { get; set; }
    }

    private ResetPasswordModel resetPasswordModel = new ResetPasswordModel();

    protected override void OnInitialized()
    {
        httpClient = HttpClientFactory.CreateClient("Auth");
        var uri = new Uri(Navigation.Uri);
        var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);

        if (query.TryGetValue("email", out var email))
        {
            resetPasswordModel.Email = email;
        }
        if (query.TryGetValue("token", out var token))
        {
            resetPasswordModel.Token = token;
        }
    }

    private async Task OnResetPassword()
    {
        try
        {
            var response = await httpClient.PostAsJsonAsync("api/Auth/reset-password", resetPasswordModel);
            if (response.IsSuccessStatusCode)
            {
                _message.Success("Your password has been reset successfully.");
                Navigation.NavigateTo("/login");
            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
                _message.Error($"Failed to reset password: {errorMessage}");
            }
        }
        catch (Exception ex)
        {
            _message.Error($"Error: {ex.Message}");
        }
    }
}