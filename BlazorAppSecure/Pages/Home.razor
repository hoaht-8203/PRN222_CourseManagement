@page "/"
@using AntDesign
@using System.Text.Json
@using Blazored.TextEditor
@using CourseManagement.Model.DTOs

@inject IMessageService _mess
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager _nav

<PageTitle>Home</PageTitle>

<div class="card-homepage">
    <div>
        <Tag Color="TagColor.Blue">1.183+ others learned</Tag>
        <h3>Pro Course</h3>
    </div>

    <Row Gutter="(16, 16)">
        @if (ListCoursePro != null)
        {
            @foreach (var courseItem in ListCoursePro)
            {
                <GridCol Span="6">
                    <Card Bordered class="course-card">
                        <Cover>
                            <img alt="@courseItem.Title" src="@courseItem.PreviewImage" style="width: 100%;" />
                        </Cover>
                        <ChildContent>
                            <CardMeta Title="@courseItem.Title" Description="@courseItem.Description" />

                            <div class="mt-3 d-flex justify-content-between align-items-center">
                                <span class="course-type">Pro Course</span>
                                <div>
                                    <Button Type="ButtonType.Primary"
                                        OnClick="() => HandleNavigateToPreview(courseItem)">Preview</Button>
                                    <Button OnClick="() => HandleNavigateToLearn(courseItem)">Go to learn</Button>
                                </div>
                            </div>
                        </ChildContent>
                        <ActionTemplate>
                            <CardAction>
                                <Icon Type="@IconType.Outline.User" /> @courseItem.TotalEnrolled
                            </CardAction>
                            <CardAction>
                                <Icon Type="@IconType.Outline.PlayCircle" /> @courseItem.TotalLesson
                            </CardAction>
                            <CardAction>
                                <Icon Type="@IconType.Outline.ClockCircle" /> @courseItem.TotalTime
                            </CardAction>
                        </ActionTemplate>
                    </Card>
                </GridCol>
            }
        }
    </Row>

    <div class="mt-5">
        <Tag Color="TagColor.Blue">433.183+ others learned</Tag>
        <h3>Free Course</h3>
    </div>

    <Row Gutter="(16, 16)">
        @if (ListCourseFree != null)
        {
            @foreach (var courseItem in ListCourseFree)
            {
                <GridCol Span="6">
                    <Card Bordered class="course-card">
                        <Cover>
                            <img alt="@courseItem.Title" src="@courseItem.PreviewImage" style="width: 100%;" />
                        </Cover>

                        <ChildContent>
                            <CardMeta Title="@courseItem.Title" Description="@courseItem.Description" />

                            <div class="mt-3 d-flex justify-content-between align-items-center">
                                <span class="course-type">Free Course</span>
                                <div>
                                    <Button Type="ButtonType.Primary"
                                        OnClick="() => HandleNavigateToPreview(courseItem)">Preview</Button>
                                    <Button OnClick="() => HandleNavigateToLearn(courseItem)">Go to learn</Button>
                                </div>
                            </div>
                        </ChildContent>
                        <ActionTemplate>
                            <CardAction>
                                <Icon Type="@IconType.Outline.User" /> @courseItem.TotalEnrolled
                            </CardAction>
                            <CardAction>
                                <Icon Type="@IconType.Outline.PlayCircle" /> @courseItem.TotalLesson
                            </CardAction>
                            <CardAction>
                                <Icon Type="@IconType.Outline.ClockCircle" /> @courseItem.TotalTime
                            </CardAction>
                        </ActionTemplate>
                    </Card>
                </GridCol>
            }
        }
    </Row>
</div>

@* <h1>Blazored.TextEditor Usage Examples</h1>

<h3>Basic Example</h3>
<div>
    <BlazoredTextEditor @ref="@richEditor">
        <ToolbarContent>
            @((MarkupString)toolbar)
        </ToolbarContent>
        <EditorContent>
            @((MarkupString)body)
        </EditorContent>
    </BlazoredTextEditor>

    <Button OnClick="HandleSubmit">Submit editor text</Button>
</div> *@

@code
{
    bool LoadingCourseProList = false;
    bool LoadingCourseFreeList = false;
    /*
    RenderFragment coverTemplate = @<img alt="example"
    src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRIK8uoM7XCJ-Od4EQvRQhhwLkXvNy9ZTKQnA&s" />;

    BlazoredTextEditor richEditor = default!;
    string toolbar = """"...markup here..."""";
    string body = """"...markup here..."""";

    protected async void HandleSubmit()
    {
    // Lấy nội dung HTML từ editor
    string htmlContent = await richEditor.GetHTML();

    // Tại đây có thể lưu htmlContent vào database
    Console.WriteLine(htmlContent);
    }
    */


    /*
    protected override void OnInitialized() {
    toolbar = """"
    <select class="ql-header">
    <option selected=""></option>
    <option value="1"></option>
    <option value="2"></option>
    <option value="3"></option>
    <option value="4"></option>
    <option value="5"></option>
    </select>
    <span class="ql-formats">
    <button class="ql-bold"></button>
    <button class="ql-italic"></button>
    <button class="ql-underline"></button>
    <button class="ql-strike"></button>
    </span>
    <span class="ql-formats">
    <select class="ql-color"></select>
    <select class="ql-background"></select>
    </span>
    <span class="ql-formats">
    <button class="ql-list" value="ordered"></button>
    <button class="ql-list" value="bullet"></button>
    </span>
    <span class="ql-formats">
    <button class="ql-link"></button>
    </span>
    <span class="ql-formats">
    <button class="ql-code-block"></button>
    </span>
    """";

    body = "<h3>Write something in here</h3>";
    }
    */

    HttpClient httpClient;

    private IQueryable<SearchCourseResponse>? ListCoursePro;
    private IQueryable<SearchCourseResponse>? ListCourseFree;

    private readonly JsonSerializerOptions jsonSerializerOptions = new()
    {
        PropertyNamingPolicy = JsonNamingPolicy.CamelCase
    };

    protected override async Task OnInitializedAsync()
    {
        httpClient = HttpClientFactory.CreateClient("Auth");

        FetchListCoursePro();
        FetchListCourseFree();
        await base.OnInitializedAsync();
    }

    void HandleNavigateToPreview(SearchCourseResponse model)
    {
        _nav.NavigateTo($"/preview/{model.Id}");
    }

    void HandleNavigateToLearn(SearchCourseResponse model)
    {
        _nav.NavigateTo($"/learning/{model.Id}");
    }

    async void FetchListCoursePro()
    {
        LoadingCourseProList = true;
        try
        {
            var result = await httpClient.GetAsync("/api/Course/search?CourseTypes=1&Statuss=1");

            if (result.IsSuccessStatusCode)
            {
                var resposne = await result.Content.ReadAsStringAsync();
                var values = JsonSerializer.Deserialize<SearchCourseResponse[]>(resposne, jsonSerializerOptions);
                if (values != null)
                {
                    ListCoursePro = values.ToList().AsQueryable();
                }
            }
            else
            {
                await _mess.Error("Internal server error when load list course");
            }
        }
        catch (Exception ex)
        {
            await _mess.Error($"Error loading courses: {ex.Message}");
        }
        finally
        {
            LoadingCourseProList = false;
            StateHasChanged();
        }
    }

    async void FetchListCourseFree()
    {
        LoadingCourseFreeList = true;
        try
        {
            var result = await httpClient.GetAsync("/api/Course/search?CourseTypes=0&Statuss=1");

            if (result.IsSuccessStatusCode)
            {
                var resposne = await result.Content.ReadAsStringAsync();
                var values = JsonSerializer.Deserialize<SearchCourseResponse[]>(resposne, jsonSerializerOptions);
                if (values != null)
                {
                    ListCourseFree = values.ToList().AsQueryable();
                }
            }
            else
            {
                await _mess.Error("Internal server error when load list course");
            }
        }
        catch (Exception ex)
        {
            await _mess.Error($"Error loading courses: {ex.Message}");
        }
        finally
        {
            LoadingCourseFreeList = false;
            StateHasChanged();
        }
    }
}

<style>
    .card-homepage .ant-card-body {
        padding: 16px;
    }

    .card-homepage .course-type {
        color: #EC4899;
        font-weight: bolder;
        font-size: 1.2rem
    }
</style>