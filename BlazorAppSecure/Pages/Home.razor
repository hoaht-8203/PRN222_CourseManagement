@page "/"
@using AntDesign
@using System.Text.Json
@using Blazored.TextEditor
@using CourseManagement.Model.DTOs
@using Microsoft.AspNetCore.WebUtilities

@inject IMessageService _mess
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager _nav

<PageTitle>Home</PageTitle>

<div class="card-homepage mt-4 container">
    <div class="section-header">
        <Tag Color="TagColor.Blue">1.183+ others learned</Tag>
        <h2 class="section-title">Pro Course</h2>
    </div>

    <Row Gutter="(24, 24)">
        @if (ListCoursePro != null) {
            @foreach (var courseItem in ListCoursePro) {
                <GridCol Span="8">
                    <Card Bordered class="course-card" Hoverable>
                        <Cover>
                            <div class="image-container">
                                <img alt="@courseItem.Title" src="@courseItem.PreviewImage" />
                            </div>
                        </Cover>
                        <ChildContent>
                            <CardMeta Title="@courseItem.Title" Description="@courseItem.Description" />

                            <div class="mt-4 d-flex justify-content-between align-items-center">
                                <span class="course-type">Pro Course</span>
                                <div class="button-group">
                                    <Button Type="ButtonType.Primary"
                                            OnClick="() => HandleNavigateToPreview(courseItem)">
                                        <Icon Type="eye" /> Preview
                                    </Button>
                                    <Button OnClick="() => HandleNavigateToLearn(courseItem)"
                                            Class="learn-button">
                                        <Icon Type="play-circle" /> Learn
                                    </Button>
                                </div>
                            </div>
                        </ChildContent>
                        <ActionTemplate>
                            <CardAction>
                                <Icon Type="user" /> @courseItem.TotalEnrolled
                            </CardAction>
                            <CardAction>
                                <Icon Type="play-circle" /> @courseItem.TotalLesson
                            </CardAction>
                            <CardAction>
                                <Icon Type="clock-circle" /> @courseItem.TotalTime
                            </CardAction>
                        </ActionTemplate>
                    </Card>
                </GridCol>
            }
        }
    </Row>

    <div class="section-header mt-3">
        <Tag Color="TagColor.Blue">433.183+ others learned</Tag>
        <h2 class="section-title">Free Course</h2>
    </div>

    <Row Gutter="(24, 24)">
        @if (ListCourseFree != null) {
            @foreach (var courseItem in ListCourseFree) {
                <GridCol Span="8">
                    <Card Bordered class="course-card" Hoverable>
                        <Cover>
                            <div class="image-container">
                                <img alt="@courseItem.Title" src="@courseItem.PreviewImage" />
                            </div>
                        </Cover>
                        <ChildContent>
                            <CardMeta Title="@courseItem.Title" Description="@courseItem.Description" />

                            <div class="mt-4 d-flex justify-content-between align-items-center">
                                <span class="course-type">Pro Course</span>
                                <div class="button-group">
                                    <Button Type="ButtonType.Primary"
                                            OnClick="() => HandleNavigateToPreview(courseItem)">
                                        <Icon Type="eye" /> Preview
                                    </Button>
                                    <Button OnClick="() => HandleNavigateToLearn(courseItem)"
                                            Class="learn-button">
                                        <Icon Type="play-circle" /> Learn
                                    </Button>
                                </div>
                            </div>
                        </ChildContent>
                        <ActionTemplate>
                            <CardAction>
                                <Icon Type="user" /> @courseItem.TotalEnrolled
                            </CardAction>
                            <CardAction>
                                <Icon Type="play-circle" /> @courseItem.TotalLesson
                            </CardAction>
                            <CardAction>
                                <Icon Type="clock-circle" /> @courseItem.TotalTime
                            </CardAction>
                        </ActionTemplate>
                    </Card>
                </GridCol>
            }
        }
    </Row>
</div>

@code
{
    bool LoadingCourseProList = false;
    bool LoadingCourseFreeList = false;

    HttpClient httpClient;

    private IQueryable<SearchCourseResponse>? ListCoursePro;
    private IQueryable<SearchCourseResponse>? ListCourseFree;

    private readonly JsonSerializerOptions jsonSerializerOptions = new()
        {
            PropertyNamingPolicy = JsonNamingPolicy.CamelCase
        };

    protected override async Task OnInitializedAsync()
    {
        httpClient = HttpClientFactory.CreateClient("Auth");

        FetchListCoursePro();
        FetchListCourseFree();

        var uri = new Uri(_nav.Uri);
        var queryParameters = QueryHelpers.ParseQuery(uri.Query);
        if (queryParameters.TryGetValue("error", out var errorMessage))
        {
            await _mess.Error(errorMessage.ToString());
            _nav.NavigateTo("/", replace: true);
        }
        await base.OnInitializedAsync();
    }

    void HandleNavigateToPreview(SearchCourseResponse model)
    {
        _nav.NavigateTo($"/preview/{model.Id}");
    }

    void HandleNavigateToLearn(SearchCourseResponse model)
    {
        _nav.NavigateTo($"/learning/{model.Id}");
    }

    async void FetchListCoursePro()
    {
        LoadingCourseProList = true;
        try
        {
            var result = await httpClient.GetAsync("/api/Course/search?CourseTypes=1&Statuss=1");

            if (result.IsSuccessStatusCode)
            {
                var resposne = await result.Content.ReadAsStringAsync();
                var values = JsonSerializer.Deserialize<SearchCourseResponse[]>(resposne, jsonSerializerOptions);
                if (values != null)
                {
                    ListCoursePro = values.ToList().AsQueryable();
                }
            }
            else
            {
                await _mess.Error("Internal server error when load list course");
            }
        }
        catch (Exception ex)
        {
            await _mess.Error($"Error loading courses: {ex.Message}");
        }
        finally
        {
            LoadingCourseProList = false;
            StateHasChanged();
        }
    }

    async void FetchListCourseFree()
    {
        LoadingCourseFreeList = true;
        try
        {
            var result = await httpClient.GetAsync("/api/Course/search?CourseTypes=0&Statuss=1");

            if (result.IsSuccessStatusCode)
            {
                var resposne = await result.Content.ReadAsStringAsync();
                var values = JsonSerializer.Deserialize<SearchCourseResponse[]>(resposne, jsonSerializerOptions);
                if (values != null)
                {
                    ListCourseFree = values.ToList().AsQueryable();
                }
            }
            else
            {
                await _mess.Error("Internal server error when load list course");
            }
        }
        catch (Exception ex)
        {
            await _mess.Error($"Error loading courses: {ex.Message}");
        }
        finally
        {
            LoadingCourseFreeList = false;
            StateHasChanged();
        }
    }
}

<style>
    .card-homepage .ant-card-body {
        padding: 16px;
    }

    .card-homepage .course-type {
        color: #EC4899;
        font-weight: bolder;
        font-size: 1.2rem
    }

    .card-homepage {
        padding: 20px;
    }

    .section-header {
        margin-bottom: 24px;
    }

    .section-title {
        margin-top: 12px;
        font-size: 2rem;
        font-weight: 600;
        color: #2c3e50;
    }

    .course-card {
        transition: transform 0.3s ease;
        height: 100%;
    }

        .course-card:hover {
            transform: translateY(-5px);
        }

    .image-container {
        position: relative;
        padding-top: 56.25%; /* 16:9 Aspect Ratio */
        overflow: hidden;
    }

        .image-container img {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

    .course-type {
        color: #EC4899;
        font-weight: 600;
        font-size: 1.1rem;
    }

    .button-group {
        display: flex;
        gap: 8px;
    }

    .learn-button {
        background-color: #52c41a;
        color: white;
        border-color: #52c41a;
    }

        .learn-button:hover {
            background-color: #73d13d;
            border-color: #73d13d;
            color: white;
        }

    :deep(.ant-card-meta-title) {
        font-size: 1.2rem;
        margin-bottom: 8px;
    }

    :deep(.ant-card-meta-description) {
        color: #666;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }

    :deep(.ant-card-actions) {
        background: #f8f9fa;
    }

    :deep(.ant-tag) {
        font-size: 0.9rem;
        padding: 4px 12px;
    }
</style>