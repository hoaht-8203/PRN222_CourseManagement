@page "/learning/{Id}"
@using CourseManagement.Model.DTOs
@using Microsoft.AspNetCore.SignalR.Client
@using CourseManagement.Model.Model
@using System.Security.Claims;

@inject IHttpClientFactory HttpClientFactory
@inject IMessageService _mess
@inject NavigationManager _nav
@inject AuthenticationStateProvider AuthState
@inject NavigationManager Navigation
@inject IJSRuntime JS
@inject HubConnection HubConnection

<div class="learning-container">
    @if (LoadingCourseDetail)
    {
        <Spin Spinning="true" Tip="Loading...">
            <div style="min-height: 200px;"></div>
        </Spin>
    } else if (CourseDetail == null)
    {
        <Empty/>
    }
    else
    {
        <div class="course-header">
            <div>
                <Title Level="3">@CourseDetail.Title</Title>
            </div>
            <Button Type="ButtonType.Link" OnClick="@(() => _nav.NavigateTo($"/preview/{Id}"))">
                <Icon Type="arrow-left" /> Back to Course
            </Button>
        </div>

        <GridRow>
            <GridCol Span="17">
                <div class="video-section">
                    @if (CurrentLesson != null)
                    {
                        <div class="video-container">
                            <iframe src="@GetYouTubeEmbedUrl(CurrentLesson.UrlVideo)"
                            allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                            allowfullscreen>
                            </iframe>
                        </div>
                        <div class="lesson-info">
                            <div class="d-flex justify-content-between align-items-center mb-3">
                                <Title Level="4">@CurrentLesson.Title</Title>
                                <Button Type="@(IsLessonCompleted(CurrentLesson.Id) ? ButtonType.Default : ButtonType.Primary)"
                                        OnClick="@(() => ToggleLessonComplete(CurrentLesson))">
                                    @if (IsLessonCompleted(CurrentLesson.Id)) {
                                        <span><Icon Type="check" /> Completed</span>
                                    } else {
                                        <span>Mark as Complete</span>
                                    }
                                </Button>
                            </div>
                            <Paragraph>@CurrentLesson.Description</Paragraph>

                            @* Thêm phần Notes *@
                            <div class="notes-section mt-4">
                                <Title Level="5">My Notes</Title>
                                <div class="d-flex gap-2 mb-3">
                                    <TextArea @bind-Value="@newNote" Placeholder="Add a note..." AutoSize="true" />
                                    <Button Type="ButtonType.Primary" OnClick="AddNote" Loading="@addingNote">Add Note</Button>
                                </div>

                                @if (loadingNotes) {
                                    <Spin />
                                } else if (notes?.Any() == true) {
                                    <AntList DataSource="@notes" Size="ListSize.Small">
                                        <ChildContent Context="note">
                                            <ListItem>
                                                <div class="note-item">
                                                    <div class="note-content">@note.Content</div>
                                                    <div class="note-date">@note.CreatedAt.ToLocalTime().ToString("g")</div>
                                                </div>
                                            </ListItem>
                                        </ChildContent>
                                    </AntList>
                                } else {
                                    <Empty />
                                }
                            </div>
                        </div>
                    }
                </div>
                <div style="position: fixed; bottom: 20px; right: 20px; z-index: 1000;">
                    <Button Type="ButtonType.Primary" Class="question-button" OnClick="ShowQnA">
                        <Icon Type="message" /> Comments
                    </Button>
                </div>
            </GridCol>
            <GridCol Span="7">
                <div class="course-content">
                    <div class="content-header">
                        <div>
                            <Title Level="4">Course content</Title>
                            <div class="course-stats">
                                <Text>@CourseDetail.Modules.Count module • @GetTotalLessons() lesson • @GetTotalDuration()</Text>
                            </div>
                        </div>
                        <div class="progress-circle">
                            <Progress Type="ProgressType.Circle"
                            Percent="@CalculateProgress()"
                            Size="ProgressSize.Small"
                            Format="@(percent => $"{completedLessons.Count}/{GetTotalLessons()}")" />
                        </div>
                    </div>

                    <Collapse DefaultActiveKey="@ActivePanelKeys"
                    ExpandIconPosition="CollapseExpandIconPosition.Right"
                    Style="@($"max-height: 650px; overflow: auto;")">
                        @foreach (var module in CourseDetail.Modules.OrderBy(m => m.Order)) {
                            <Panel Header="@($"{module.Order}. {module.Title}")"
                            Key="@module.Order.ToString()"
                            Extra="@($"{GetCompletedLessonsInModule(module)}/{module.Lessons.Count}")">
                                <AntList DataSource="@module.Lessons.OrderBy(l => l.Order)">
                                    <ChildContent Context="lesson">
                                        <ListItem Class="@GetLessonClass(lesson)"
                                        OnClick="@(() => HandleLessonClick(lesson))">
                                            <div class="lesson-item">
                                                <div>
                                                    @if (IsLessonCompleted(lesson.Id)) {
                                                        <Icon Type="check-circle" Theme="IconThemeType.Fill" Style="color: #52c41a;" />
                                                    } else {
                                                        <Icon Type="play-circle" Theme="IconThemeType.Outline" />
                                                    }
                                                    <span class="ml-2">@lesson.Title</span>
                                                </div>
                                                @if (lesson.VideoDuration.HasValue) {
                                                    <Tag Color="TagColor.Blue">@FormatDuration(lesson.VideoDuration.Value)</Tag>
                                                }
                                            </div>
                                        </ListItem>
                                    </ChildContent>
                                </AntList>
                            </Panel>
                        }
                    </Collapse>
                </div>
            </GridCol>
        </GridRow>
    }
</div>
<Drawer Closable="true"
        @bind-Visible="showDrawer"
        Placement="DrawerPlacement.Right"
        Title='("Comments")'
        Width="500"
        OnClose="@CloseQnA">
        <div class="comments-section">
            <!-- Ô nhập comment -->
        <div style="display: flex; align-items: center; gap: 10px; width: 100%;">
            <Avatar Icon="user" />
            <TextArea @bind-Value="newComment"
                    Placeholder="Write a comment..."
                    Style="flex-grow: 1;" />
            
        </div>
        <div style="margin-top: 12px; display:flex ;justify-content:flex-end">
            <Button Type="ButtonType.Primary" OnClick="SubmitComment">Submit</Button>

        </div>
            <Divider />

            <!-- Danh sách comment -->
            <div class="comments-list">
                @foreach (var comment in comments)
                {
                    <div class="comment-item">
                        <div style="margin-bottom: 8px">
                        <Avatar Icon="user" />
                        <strong>@comment.Username</strong>
                        </div>
                                                <p>@comment.Content</p>
                        <Divider />
                    </div>
                }
            </div>
        </div>
    
</Drawer>

@code {
    [Parameter]
    public string Id { get; set; }

    private LearnCourseResponse CourseDetail { get; set; }
    private LearnCourseResponse.Lesson CurrentLesson { get; set; }
    private bool LoadingCourseDetail = true;
    private string[] ActivePanelKeys = new[] { "1" };
    private HttpClient httpClient;
    private HashSet<int> completedLessons = new();
    private List<NoteResponse> notes = new();
    private string newNote = "";
    private bool loadingNotes = false;
    private bool addingNote = false;
    private bool showDrawer = false;
    private List<CommentDTO> comments = new();
    private string newComment = "";

    private void ShowQnA() => showDrawer = true;
    private void CloseQnA() => showDrawer = false;

    protected override async Task OnInitializedAsync() {
        httpClient = HttpClientFactory.CreateClient("Auth");
        await FetchCourseDetail();
        if (CourseDetail != null)  // Chỉ load completed lessons nếu course detail load thành công
        {
            await LoadCompletedLessons();
        }

        await LoadComments();
        await HubConnection.StartAsync();
        if (HubConnection.State != HubConnectionState.Connected)
        {
            await _mess.Error("SignalR is not connected.");
        }


        HubConnection.On<CommentDTO>("ReceiveComment", async (comment) =>
        {
            _mess.Success("New comment received");
            if(comment.LessonId == CurrentLesson.Id)
            {
                comments.Add(new CommentDTO
                {
                    Content = comment.Content,
                    LessonId = comment.LessonId,
                    Username = comment.Username

                });
                StateHasChanged();
            }
        });


        await HubConnection.SendAsync("JoinLessonGroup", CurrentLesson.Id.ToString());
    }

    private async Task LoadCompletedLessons() {
        try {
            var response = await httpClient.GetAsync($"/api/Lesson/get-lessons-completed?CourseId={Id}");
            if (response.IsSuccessStatusCode) {
                var result = await response.Content.ReadFromJsonAsync<GetLessonsCompletedResponse>();
                if (result != null) {
                    completedLessons = result.ListLessonId;
                }
            }
        } catch (Exception ex) {
            await _mess.Error($"Error loading progress: {ex.Message}");
        }
    }

    private async Task ToggleLessonComplete(LearnCourseResponse.Lesson lesson) {
        try {
            if (IsLessonCompleted(lesson.Id)) {
                // Gọi API để đánh dấu lesson chưa hoàn thành
                var response = await httpClient.GetAsync($"/api/Lesson/lesson-not-completed?LessonId={lesson.Id}");
                if (response.IsSuccessStatusCode) {
                    completedLessons.Remove(lesson.Id);
                    _mess.Success("Lesson marked as not completed");
                } else {
                    var error = await response.Content.ReadAsStringAsync();
                    _mess.Error($"Failed to update lesson status: {error}");
                }
            } else {
                // Gọi API để đánh dấu lesson đã hoàn thành
                var response = await httpClient.GetAsync($"/api/Lesson/lesson-completed?LessonId={lesson.Id}");
                if (response.IsSuccessStatusCode) {
                    completedLessons.Add(lesson.Id);
                    _mess.Success("Lesson marked as completed");
                } else {
                    var error = await response.Content.ReadAsStringAsync();
                    _mess.Error($"Failed to update lesson status: {error}");
                }
            }

            StateHasChanged();
        } catch (Exception ex) {
            _mess.Error($"Error updating progress: {ex.Message}");
        }
    }

    private bool IsLessonCompleted(int lessonId) {
        return completedLessons.Contains(lessonId);
    }

    private string GetLessonClass(LearnCourseResponse.Lesson lesson) {
        var classes = new List<string>();

        if (CurrentLesson?.Id == lesson.Id)
            classes.Add("active");

        if (IsLessonCompleted(lesson.Id))
            classes.Add("completed");

        return string.Join(" ", classes);
    }

    private int GetCompletedLessonsInModule(LearnCourseResponse.Module module) {
        return module.Lessons.Count(l => IsLessonCompleted(l.Id));
    }

    private double CalculateProgress() {
        if (CourseDetail == null) return 0;

        var totalLessons = GetTotalLessons();
        if (totalLessons == 0) return 0;

        return Math.Round((double)completedLessons.Count / totalLessons * 100, 1);
    }

    private async Task LoadNotes() {
        if (CurrentLesson == null) return;

        loadingNotes = true;
        try {
            var response = await httpClient.GetAsync($"/api/Lesson/get-notes?LessonId={CurrentLesson.Id}");
            if (response.IsSuccessStatusCode) {
                var result = await response.Content.ReadFromJsonAsync<GetNotesResponse>();
                notes = result?.Notes ?? new();
            }
        } catch (Exception ex) {
            await _mess.Error($"Error loading notes: {ex.Message}");
        } finally {
            loadingNotes = false;
            StateHasChanged();
        }
    }

    private async Task AddNote() {
        if (string.IsNullOrWhiteSpace(newNote) || CurrentLesson == null) return;

        addingNote = true;
        try {
            var request = new AddNoteRequest {
                    LessonId = CurrentLesson.Id,
                    Content = newNote
                };

            var response = await httpClient.PostAsJsonAsync("/api/Lesson/add-note", request);
            if (response.IsSuccessStatusCode) {
                _mess.Success("Note added successfully");
                newNote = "";
                await LoadNotes();
            } else {
                var error = await response.Content.ReadAsStringAsync();
                _mess.Error($"Failed to add note: {error}");
            }
        } catch (Exception ex) {
            _mess.Error($"Error adding note: {ex.Message}");
        } finally {
            addingNote = false;
            StateHasChanged();
        }
    }

    private async Task HandleLessonClick(LearnCourseResponse.Lesson lesson) {
        CurrentLesson = lesson;
        var module = CourseDetail.Modules.First(m => m.Id == lesson.ModuleId);
        ActivePanelKeys = new[] { module.Order.ToString() };
        await UpdateLastViewedLesson(lesson);
        await LoadNotes();
    }

    private async Task FetchCourseDetail() {
        try {
            var response = await httpClient.GetAsync($"/api/Course/learn?CourseId={Id}");
            if (response.IsSuccessStatusCode) {
                CourseDetail = await response.Content.ReadFromJsonAsync<LearnCourseResponse>();
                if (CourseDetail?.Modules.Any() == true) {
                    await LoadLastViewedLesson();
                }
            } else {
                _nav.NavigateTo("/?error=You must enroll in this course first");
            }
        } catch (Exception ex) {
            LoadingCourseDetail = false;
            await _mess.Error($"Error: {ex.Message}");
        } finally {
            LoadingCourseDetail = false;
            StateHasChanged();
        }
    }

    private async Task LoadLastViewedLesson() {
        try {
            var response = await httpClient.GetAsync($"/api/Lesson/get-last-viewed?CourseId={Id}");
            if (response.IsSuccessStatusCode) {
                var result = await response.Content.ReadFromJsonAsync<GetLastViewedResponse>();

                if (result?.LastViewedLessonId != null) {
                    var lesson = CourseDetail.Modules
                        .SelectMany(m => m.Lessons)
                        .FirstOrDefault(l => l.Id == result.LastViewedLessonId);

                    if (lesson != null) {
                        CurrentLesson = lesson;
                        var module = CourseDetail.Modules.First(m => m.Id == lesson.ModuleId);
                        ActivePanelKeys = new[] { module.Order.ToString() };
                        return;
                    }
                }

                var firstModule = CourseDetail.Modules.OrderBy(m => m.Order).FirstOrDefault();
                if (firstModule?.Lessons.Any() == true) {
                    var firstLesson = firstModule.Lessons.OrderBy(l => l.Order).First();
                    CurrentLesson = firstLesson;
                    ActivePanelKeys = new[] { firstModule.Order.ToString() };
                }
            }
        } catch (Exception ex) {
            await _mess.Error($"Error loading last viewed lesson: {ex.Message}");
        }
    }

    private async Task UpdateLastViewedLesson(LearnCourseResponse.Lesson lesson) {
        try {
            var request = new UpdateLastViewedRequest {
                    CourseId = Id,
                    LessonId = lesson.Id
                };
            await httpClient.PostAsJsonAsync("/api/Lesson/update-last-viewed", request);
        } catch (Exception ex) {
            await _mess.Error($"Error updating last viewed lesson: {ex.Message}");
        }
    }

    private int GetTotalLessons()
    {
        return CourseDetail.Modules.Sum(m => m.Lessons.Count);
    }

    private string GetTotalDuration()
    {
        var totalDuration = TimeSpan.Zero;
        foreach (var module in CourseDetail.Modules)
        {
            foreach (var lesson in module.Lessons)
            {
                if (lesson.VideoDuration.HasValue)
                {
                    totalDuration += lesson.VideoDuration.Value;
                }
            }
        }
        return FormatDuration(totalDuration);
    }

    private string FormatDuration(TimeSpan duration)
    {
        if (duration.Hours > 0)
        {
            return $"{duration.Hours}:{duration.Minutes:D2}:{duration.Seconds:D2}";
        }
        return $"{duration.Minutes}:{duration.Seconds:D2}";
    }

    private string GetYouTubeEmbedUrl(string url)
    {
        if (string.IsNullOrEmpty(url)) return "";

        string videoId = "";

        if (url.Contains("youtube.com/watch"))
        {
            var uri = new Uri(url);
            var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
            videoId = query["v"];
        }
        else if (url.Contains("youtu.be"))
        {
            videoId = url.Split('/').Last();
        }
        else if (url.Length == 11)
        {
            videoId = url;
        }

        return $"https://www.youtube.com/embed/{videoId}";
    }

    private async Task LoadComments()
    {
        try
        {
            var response = await httpClient.GetAsync($"/api/Comment?lessonId={CurrentLesson.Id}");
            if (response.IsSuccessStatusCode)
            {
                comments = await response.Content.ReadFromJsonAsync<List<CommentDTO>>();
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            await _mess.Error($"Error loading comments: {ex.Message}");
        }
    }

    private async Task SubmitComment()
    {
        if (string.IsNullOrWhiteSpace(newComment)) return;

        var Username = (await AuthState.GetAuthenticationStateAsync()).User.Identity.Name;
        var comment = new CourseManagement.Model.DTOs.CommentDTO { LessonId = CurrentLesson.Id, Content = newComment, Username = Username ?? "Anonymous" };
        var jsonComment = System.Text.Json.JsonSerializer.Serialize(comment);
        await httpClient.PostAsJsonAsync("/api/Comment", comment);
        newComment = "";
        StateHasChanged();
        await HubConnection.SendAsync("SendComment",comment);
        
    }
}

<style>
    .learning-container {
        padding: 0px;
        max-width: 1600px;
        margin: 0 auto;
    }

    .video-section {
        padding-right: 24px;
    }

    .video-container {
        position: relative;
        padding-bottom: 56.25%;
        height: 0;
        overflow: hidden;
        border-radius: 8px;
    }

        .video-container iframe {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            border: 0;
        }

    .lesson-info {
        margin-top: 24px;
        padding: 24px;
        background: #fff;
        border-radius: 8px;
        border: 1px solid #f0f0f0;
    }

    .course-content {
        background: #fff;
        border-radius: 8px;
        border: 1px solid #f0f0f0;
        padding: 24px;
        height: 100%;
    }

    .course-stats {
        margin: 16px 0;
        color: #666;
    }

    .lesson-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        width: 100%;
        cursor: pointer;
        padding: 8px;
    }

    .active {
        background-color: #e6f7ff;
    }

    :deep(.ant-collapse-content-box) {
        padding: 0 !important;
    }

    :deep(.ant-list-item) {
        padding: 0 !important;
    }

    .ant-collapse-content-box {
        padding: 0px !important;
    }

    .lesson-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        width: 100%;
        cursor: pointer;
        padding: 8px;
    }

    .completed {
        background-color: #f6ffed;
    }

    .active {
        background-color: #e6f7ff !important;
    }

        .active.completed {
            background-color: #b7eb8f !important;
        }

    .ml-2 {
        margin-left: 8px;
    }

    .mb-4 {
        margin-bottom: 16px;
    }

    .mb-3 {
        margin-bottom: 12px;
    }

    .course-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .content-header {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        margin-bottom: 16px;
    }

    .progress-circle {
        padding-top: 4px;
    }

    :deep(.ant-progress-circle) {
        width: 80px !important;
        height: 80px !important;
    }

    .notes-section {
        border-top: 1px solid #f0f0f0;
        padding-top: 1rem;
    }

    .note-item {
        width: 100%;
    }

    .note-content {
        white-space: pre-wrap;
    }

    .note-date {
        font-size: 0.8rem;
        color: #8c8c8c;
        margin-top: 0.5rem;
    }
</style>
